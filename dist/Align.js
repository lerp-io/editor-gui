// Generated by CoffeeScript 2.5.1
var BAR_DIM, MIN_HEIGHT, MIN_WIDTH, REBAR_DIM, checkFitAlignDown, checkFitAlignLeft, checkFitAlignRight, checkFitAlignUp, checkFitPositionBottom, checkFitPositionTop, checkfitPositionLeft, checkfitPositionRight, clampHeight, clampPosition, clampWidth, fixAlign, getAlignDirections, getPosition, guessAlign, initAlign;

MIN_HEIGHT = 10;

MIN_WIDTH = 300;

BAR_DIM = 12;

REBAR_DIM = 4;

//neveragain
guessAlign = function(width, height, ctx, x, y) {
  var pre_align;
  if (!ctx.align) {
    pre_align = initAlign(ctx, x, y, width, height);
  } else {
    pre_align = ctx.align;
  }
  switch (pre_align) {
    case 'right-down':
      return ctx.vert && 'right-down' || 'bottom-right';
    case 'right-up':
      return ctx.vert && 'right-up' || 'top-right';
    case 'left-down':
      return ctx.vert && 'left-down' || 'bottom-left';
    case 'left-up':
      return ctx.vert && 'left-up' || 'top-left';
    case 'bottom-right':
      return ctx.vert && 'right-down' || 'bottom-right';
    case 'bottom-left':
      return ctx.vert && 'left-down' || 'bottom-left';
    case 'top-right':
      return ctx.vert && 'right-up' || 'top-right';
    case 'top-left':
      return ctx.vert && 'left-up' || 'top-left';
    default:
      throw new Error('invalid align key');
  }
};

initAlign = function(ctx, x, y, width, height) {
  // log 'init align',x,width/2,ctx.view_rect.width/2
  if (x + width / 2 < ctx.view_rect.width / 2) {
    if (y + height / 2 < ctx.view_rect.height / 2) {
      return ctx.vert && 'right-down' || 'bottom-right';
    } else {
      return ctx.vert && 'right-up' || 'top-right';
    }
  } else {
    if (y + height / 2 < ctx.view_rect.height / 2) {
      return ctx.vert && 'left-down' || 'bottom-left';
    } else {
      return ctx.vert && 'left-up' || 'top-left';
    }
  }
};

checkFitAlignRight = function(ctx, width, height) {
  return Math.min(ctx.view_rect.right - (ctx.sel_x + width), 0);
};

checkFitAlignLeft = function(ctx, width, height) {
  return Math.min((ctx.sel_x + ctx.sel_w - width) - ctx.view_rect.left, 0);
};

checkFitAlignUp = function(ctx, width, height) {
  return Math.min((ctx.sel_y + ctx.dim - height) - ctx.view_rect.top, 0);
};

checkFitAlignDown = function(ctx, width, height) {
  return Math.min(ctx.view_rect.bottom - (ctx.sel_y + height), 0);
};

checkFitPositionBottom = function(ctx, width, height) {
  return Math.min(ctx.view_rect.bottom - (ctx.y + ctx.height + height), 0);
};

checkFitPositionTop = function(ctx, width, height) {
  return Math.min((ctx.y - height) - ctx.view_rect.top, 0);
};

checkfitPositionLeft = function(ctx, width, height) {
  return Math.min((ctx.x - width) - ctx.view_rect.left, 0);
};

checkfitPositionRight = function(ctx, width, height) {
  return Math.min(ctx.view_rect.right - (ctx.x + ctx.width + width), 0);
};

fixAlign = function(align_key, ctx, width, height) {
  var bottom, down, left, right, top, up;
  switch (align_key) {
    case 'right-down':
      left = checkfitPositionLeft(ctx, width, height) > checkfitPositionRight(ctx, width, height);
      up = checkFitAlignDown(ctx, width, height) < checkFitAlignUp(ctx, width, height);
      if (left) {
        if (up) {
          return 'left-up';
        } else {
          return 'left-down';
        }
      } else {
        if (up) {
          return 'right-up';
        } else {
          return 'right-down';
        }
      }
      break;
    case 'right-up':
      left = checkfitPositionLeft(ctx, width, height) > checkfitPositionRight(ctx, width, height);
      up = checkFitAlignDown(ctx, width, height) < checkFitAlignUp(ctx, width, height);
      if (left) {
        if (down) {
          return 'left-down';
        } else {
          return 'left-up';
        }
      } else {
        if (down) {
          return 'right-down';
        } else {
          return 'right-up';
        }
      }
      break;
    case 'left-down':
      right = checkfitPositionLeft(ctx, width, height) < checkfitPositionRight(ctx, width, height);
      up = checkFitAlignDown(ctx, width, height) < checkFitAlignUp(ctx, width, height);
      if (right) {
        if (up) {
          return 'right-up';
        } else {
          return 'right-down';
        }
      } else {
        if (up) {
          return 'left-up';
        } else {
          return 'left-down';
        }
      }
      break;
    case 'left-up':
      right = checkfitPositionLeft(ctx, width, height) < checkfitPositionRight(ctx, width, height);
      down = checkFitAlignUp(ctx, width, height) < checkFitAlignDown(ctx, width, height);
      if (right) {
        if (down) {
          return 'right-down';
        } else {
          return 'right-up';
        }
      } else {
        if (down) {
          return 'left-down';
        } else {
          return 'left-up';
        }
      }
      break;
    case 'bottom-right':
      top = checkFitPositionBottom(ctx, width, height) < checkFitPositionTop(ctx, width, height);
      left = checkFitAlignRight(ctx, width, height) < checkFitAlignLeft(ctx, width, height);
      if (top) {
        if (left) {
          return 'top-left';
        } else {
          return 'top-right';
        }
      } else {
        if (left) {
          return 'bottom-left';
        } else {
          return 'bottom-right';
        }
      }
      break;
    case 'bottom-left':
      top = checkFitPositionTop(ctx, width, height) > checkFitPositionBottom(ctx, width, height);
      right = checkFitAlignLeft(ctx, width, height) < checkFitAlignRight(ctx, width, height);
      if (top) {
        if (right) {
          return 'top-right';
        } else {
          return 'top-left';
        }
      } else {
        if (right) {
          return 'bottom-right';
        } else {
          return 'bottom-left';
        }
      }
      break;
    case 'top-right':
      bottom = checkFitPositionBottom(ctx, width, height) > checkFitPositionTop(ctx, width, height);
      left = checkFitAlignLeft(ctx, width, height) > checkFitAlignRight(ctx, width, height);
      if (bottom) {
        if (left) {
          return 'bottom-left';
        } else {
          return 'bottom-right';
        }
      } else {
        if (left) {
          return 'top-left';
        } else {
          return 'top-right';
        }
      }
      break;
    case 'top-left':
      bottom = checkFitPositionBottom(ctx, width, height) > checkFitPositionTop(ctx, width, height);
      right = checkFitAlignLeft(ctx, width, height) < checkFitAlignRight(ctx, width, height);
      if (bottom) {
        if (right) {
          return 'bottom-right';
        } else {
          return 'bottom-left';
        }
      } else {
        if (right) {
          return 'top-right';
        } else {
          return 'top-left';
        }
      }
  }
};

clampHeight = function(ctx, height) {
  if (ctx.root && ctx.clamp_height) {
    return Math.max(Math.min(ctx.view_rect.height - BAR_DIM - REBAR_DIM, Math.min(ctx.clamp_height, height)), MIN_HEIGHT);
  } else if (ctx.root) {
    return Math.max(Math.min(ctx.view_rect.height - BAR_DIM - REBAR_DIM, height), MIN_HEIGHT);
  } else {
    return Math.max(Math.min(height, ctx.view_rect.height), MIN_HEIGHT);
  }
};

clampWidth = function(ctx, width) {
  if (ctx.root && ctx.clamp_width) {
    return Math.max(Math.min(ctx.view_rect.width - BAR_DIM - REBAR_DIM, ctx.clamp_width), MIN_WIDTH);
  } else if (ctx.root) {
    return Math.min(ctx.view_rect.width - BAR_DIM - REBAR_DIM, MIN_WIDTH);
  } else {
    return Math.max(Math.min(width, ctx.view_rect.width), MIN_WIDTH);
  }
};

getAlignDirections = function(align_key) {
  var a, bottom, down, left, right, top, up;
  a = align_key.split('-');
  right = a[0] === 'right';
  left = a[0] === 'left';
  down = a[1] === 'down';
  up = a[1] === 'up';
  bottom = a[0] === 'bottom';
  top = a[0] === 'top';
  return [left, right, bottom, top, up, down];
};

getPosition = function(width, height, ctx, align_key) {
  var x, y;
  x = y = 0;
  switch (align_key) {
    case 'right-down':
      x = ctx.x + ctx.width;
      y = ctx.sel_y;
      break;
    case 'right-up':
      x = ctx.x + ctx.width;
      y = ctx.sel_y + ctx.dim - height;
      break;
    case 'left-down':
      x = ctx.x - width;
      y = ctx.sel_y;
      break;
    case 'left-up':
      x = ctx.x - width;
      y = ctx.sel_y + ctx.dim - height;
      break;
    case 'bottom-right':
      x = ctx.sel_x;
      y = ctx.y + ctx.height;
      break;
    case 'bottom-left':
      x = (ctx.sel_x + ctx.sel_w) - width;
      y = ctx.y + ctx.height;
      break;
    case 'top-right':
      x = ctx.sel_x;
      y = ctx.y - height;
      break;
    case 'top-left':
      x = (ctx.sel_x + ctx.sel_w) - width;
      y = ctx.y - height;
      break;
    default:
      throw new Error('invalid align key');
  }
  return [x, y];
};

clampPosition = function(ctx, x, y, width, height, align_key) {
  var add_offset_x, add_offset_y, offset_x, offset_y;
  offset_x = 0;
  offset_y = 0;
  add_offset_x = 0;
  add_offset_y = 0;
  if (x + width > ctx.view_rect.right) {
    offset_x = ctx.view_rect.right - (x + width);
  } else if (x < ctx.view_rect.left) {
    offset_x = ctx.view_rect.left - x;
  }
  if (y + height > ctx.view_rect.bottom) {
    offset_y = ctx.view_rect.bottom - (y + height);
  } else if (y < ctx.view_rect.top) {
    offset_y = ctx.view_rect.top - y;
  }
  
  // log align_key
  if (offset_y && !offset_x) {
    if (align_key === 'top-left' || align_key === 'bottom-left') {
      add_offset_x = -ctx.dim / 2;
    } else if (align_key === 'top-right' || align_key === 'bottom-right') {
      add_offset_x = ctx.dim / 2;
    }
  }
  // else if align_key == 'left-up' || align_key == 'left-down'
  // 	add_offset_x = -ctx.dim/2
  // else if align_key == 'right-up' || align_key == 'right-down'
  // 	add_offset_x = ctx.dim/2
  if (offset_x && !offset_y) {
    // if align_key == 'top-left' || align_key == 'bottom-left'
    // 	add_offset_y = -ctx.dim/2
    // else if align_key == 'top-right' || align_key == 'bottom-right'
    // 	add_offset_y = ctx.dim/2
    if (align_key === 'right-down' || align_key === 'left-down') {
      add_offset_y = -ctx.dim / 2;
    } else if (align_key === 'right-up' || align_key === 'left-up') {
      add_offset_y = ctx.dim / 2;
    }
  }
  offset_x += add_offset_x;
  offset_y += add_offset_y;
  // if offset_x && !offset_y
  // 	offset_y -= ctx.dim/2

    // log offset_x,offset_y
  // if align_key
  // 	if align_key == 'right-down' || align_key == 'right-down' || align_key == 'left-down' || align_key == 'left-up'
  // 		if offset_x
  // 			log align_key,offset_x
  // 			offset_y += ctx.dim/2
  // 		else 
  // 	else
  // 		if offset_x
  // 			log align_key,offset_x
  // 			offset_y -= ctx.dim/2
  // 		else if offset_y
  // 			log align_key,offset_y
  // 			offset_x -= ctx.dim/2
  return [offset_x, offset_y];
};

export {
  clampPosition,
  getPosition,
  fixAlign,
  guessAlign,
  clampHeight,
  clampWidth
};

//# sourceMappingURL=Align.js.map
