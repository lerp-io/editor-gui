{
  "version": 3,
  "file": "Align.js",
  "sourceRoot": "..",
  "sources": [
    "components/Align.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "MIN_HEIGHT = 10\nMIN_WIDTH = 300\nBAR_DIM = 12\nREBAR_DIM = 4\n#neveragain\n\nguessAlign = (width,height,ctx,x,y)->\n\tif !ctx.align\n\t\tpre_align = initAlign(ctx,x,y,width,height)\n\telse\n\t\tpre_align = ctx.align\n\t\n\tswitch pre_align\n\t\twhen 'right-down'\n\t\t\treturn ctx.vert && 'right-down' || 'bottom-right'\n\t\twhen 'right-up'\n\t\t\treturn ctx.vert && 'right-up' || 'top-right'\n\t\twhen 'left-down'\n\t\t\treturn ctx.vert && 'left-down' || 'bottom-left'\n\t\twhen 'left-up'\n\t\t\treturn ctx.vert && 'left-up' || 'top-left'\n\t\twhen 'bottom-right'\n\t\t\treturn ctx.vert && 'right-down' || 'bottom-right'\n\t\twhen 'bottom-left'\n\t\t\treturn ctx.vert && 'left-down' || 'bottom-left'\n\t\twhen 'top-right'\n\t\t\treturn ctx.vert && 'right-up' || 'top-right'\n\t\twhen 'top-left'\n\t\t\treturn ctx.vert && 'left-up' || 'top-left'\n\t\telse\n\t\t\tthrow new Error 'invalid align key'\t\n\n\n\ninitAlign = (ctx,x,y,width,height)->\n\t# log 'init align',x,width/2,ctx.view_rect.width/2\n\tif x + width/2 < ctx.view_rect.width/2\n\t\tif y + height/2 < ctx.view_rect.height/2\n\t\t\treturn ctx.vert && 'right-down' || 'bottom-right'\n\t\telse\n\t\t\treturn ctx.vert && 'right-up' || 'top-right'\n\telse\n\t\tif y + height/2 < ctx.view_rect.height/2\n\t\t\treturn ctx.vert && 'left-down' || 'bottom-left'\n\t\telse\n\t\t\treturn ctx.vert && 'left-up' || 'top-left'\n\n\n\ncheckFitAlignRight = (ctx,width,height)->\n\tMath.min(ctx.view_rect.right - (ctx.sel_x + width),0)\n\ncheckFitAlignLeft = (ctx,width,height)->\n\tMath.min((ctx.sel_x + ctx.sel_w - width) - ctx.view_rect.left,0)\n\ncheckFitAlignUp = (ctx,width,height)->\n\tMath.min((ctx.sel_y + ctx.dim - height) - ctx.view_rect.top,0)\n\ncheckFitAlignDown = (ctx,width,height)->\n\tMath.min(ctx.view_rect.bottom - (ctx.sel_y + height),0)\n\ncheckFitPositionBottom = (ctx,width,height)->\n\tMath.min(ctx.view_rect.bottom - (ctx.y + ctx.height + height),0)\n\ncheckFitPositionTop = (ctx,width,height)->\n\tMath.min((ctx.y - height) - (ctx.view_rect.top),0)\n\ncheckfitPositionLeft = (ctx,width,height)->\n\tMath.min((ctx.x - width) - (ctx.view_rect.left),0)\n\t\t\ncheckfitPositionRight = (ctx,width,height)->\n\tMath.min((ctx.view_rect.right) - (ctx.x + ctx.width + width),0)\n\n\n\n\n\n\nfixAlign = (align_key,ctx,width,height)->\n\tswitch align_key\n\t\twhen 'right-down'\n\t\t\tleft = checkfitPositionLeft(ctx,width,height) > checkfitPositionRight(ctx,width,height)\n\t\t\tup = checkFitAlignDown(ctx,width,height) < checkFitAlignUp(ctx,width,height)\n\t\t\tif left\n\t\t\t\tif up then return 'left-up'\n\t\t\t\telse return 'left-down'\n\t\t\telse\n\t\t\t\tif up then return 'right-up'\n\t\t\t\telse return 'right-down'\n\n\t\twhen 'right-up'\n\t\t\tleft = checkfitPositionLeft(ctx,width,height) > checkfitPositionRight(ctx,width,height)\n\t\t\tup = checkFitAlignDown(ctx,width,height) < checkFitAlignUp(ctx,width,height)\n\t\t\tif left\n\t\t\t\tif down then return 'left-down'\n\t\t\t\telse return 'left-up'\n\t\t\telse\n\t\t\t\tif down then return 'right-down'\n\t\t\t\telse return 'right-up'\n\n\t\twhen 'left-down'\n\t\t\tright = checkfitPositionLeft(ctx,width,height) < checkfitPositionRight(ctx,width,height)\n\t\t\tup = checkFitAlignDown(ctx,width,height) < checkFitAlignUp(ctx,width,height)\n\t\t\tif right\n\t\t\t\tif up then return 'right-up'\n\t\t\t\telse return 'right-down'\n\t\t\telse\n\t\t\t\tif up then return 'left-up'\n\t\t\t\telse return 'left-down'\n\n\t\twhen 'left-up'\n\t\t\tright = checkfitPositionLeft(ctx,width,height) < checkfitPositionRight(ctx,width,height)\n\t\t\tdown = checkFitAlignUp(ctx,width,height) < checkFitAlignDown(ctx,width,height)\n\t\t\tif right\n\t\t\t\tif down then return 'right-down'\n\t\t\t\telse return 'right-up'\n\t\t\telse\n\t\t\t\tif down then return 'left-down'\n\t\t\t\telse return 'left-up'\n\n\t\twhen 'bottom-right'\n\t\t\ttop = checkFitPositionBottom(ctx,width,height) < checkFitPositionTop(ctx,width,height)\n\t\t\tleft = checkFitAlignRight(ctx,width,height) < checkFitAlignLeft(ctx,width,height)\n\t\t\tif top\n\t\t\t\tif left then return 'top-left'\n\t\t\t\telse return 'top-right'\n\t\t\telse\n\t\t\t\tif left then return 'bottom-left'\n\t\t\t\telse return 'bottom-right'\n\n\t\twhen 'bottom-left'\n\t\t\ttop = checkFitPositionTop(ctx,width,height) > checkFitPositionBottom(ctx,width,height)\n\t\t\tright = checkFitAlignLeft(ctx,width,height) < checkFitAlignRight(ctx,width,height)\n\t\t\tif top\n\t\t\t\tif right then return 'top-right'\n\t\t\t\telse return 'top-left'\n\t\t\telse\n\t\t\t\tif right then return 'bottom-right'\n\t\t\t\telse return 'bottom-left'\n\n\t\twhen 'top-right'\n\t\t\tbottom = checkFitPositionBottom(ctx,width,height) > checkFitPositionTop(ctx,width,height)\n\t\t\tleft = checkFitAlignLeft(ctx,width,height) > checkFitAlignRight(ctx,width,height)\n\t\t\tif bottom\n\t\t\t\tif left then return 'bottom-left'\n\t\t\t\telse return 'bottom-right'\n\t\t\telse\n\t\t\t\tif left then return 'top-left'\n\t\t\t\telse return 'top-right'\n\n\t\twhen 'top-left'\n\t\t\tbottom = checkFitPositionBottom(ctx,width,height) > checkFitPositionTop(ctx,width,height)\n\t\t\tright = checkFitAlignLeft(ctx,width,height) < checkFitAlignRight(ctx,width,height)\n\t\t\tif bottom\n\t\t\t\tif right then return 'bottom-right'\n\t\t\t\telse return 'bottom-left'\n\t\t\telse\n\t\t\t\tif right then return 'top-right'\n\t\t\t\telse return 'top-left'\n\n\n\nclampHeight = (ctx,height)->\n\tif ctx.root && ctx.clamp_height\n\t\treturn Math.max(Math.min(ctx.view_rect.height- BAR_DIM - REBAR_DIM,Math.min(ctx.clamp_height,height)),MIN_HEIGHT)\n\telse if ctx.root\n\t\treturn Math.max(Math.min(ctx.view_rect.height - BAR_DIM - REBAR_DIM,height),MIN_HEIGHT)\n\telse\n\t\treturn Math.max(Math.min(height,ctx.view_rect.height),MIN_HEIGHT)\n\nclampWidth = (ctx,width)->\n\tif ctx.root && ctx.clamp_width\n\t\treturn Math.max(Math.min(ctx.view_rect.width - BAR_DIM - REBAR_DIM,ctx.clamp_width),MIN_WIDTH)\n\telse if ctx.root\n\t\treturn Math.min(ctx.view_rect.width - BAR_DIM - REBAR_DIM,MIN_WIDTH)\n\telse\n\t\treturn Math.max(Math.min(width,ctx.view_rect.width),MIN_WIDTH)\n\n\n\ngetAlignDirections = (align_key)->\n\ta = align_key.split('-')\n\tright = a[0] == 'right'\n\tleft = a[0] == 'left'\n\tdown = a[1] == 'down'\n\tup = a[1] == 'up'\n\tbottom = a[0] == 'bottom'\n\ttop = a[0] == 'top'\n\treturn [left,right,bottom,top,up,down]\n\n\n\ngetPosition = (width,height,ctx,align_key)->\n\tx = y = 0\n\tswitch align_key\n\t\twhen 'right-down'\n\t\t\tx = ctx.x + ctx.width\n\t\t\ty = ctx.sel_y\n\t\twhen 'right-up'\n\t\t\tx = (ctx.x + ctx.width)\n\t\t\ty = ctx.sel_y + ctx.dim - height\n\t\twhen 'left-down'\n\t\t\tx = ctx.x - width\n\t\t\ty = ctx.sel_y\n\t\twhen 'left-up'\n\t\t\tx = (ctx.x - width)\n\t\t\ty = ctx.sel_y + ctx.dim - height\n\t\twhen 'bottom-right'\n\t\t\tx = ctx.sel_x\n\t\t\ty = ctx.y+ctx.height\n\t\twhen 'bottom-left'\n\t\t\tx = (ctx.sel_x + ctx.sel_w) - width\n\t\t\ty = ctx.y+ctx.height\n\t\twhen 'top-right'\n\t\t\tx = ctx.sel_x\n\t\t\ty = ctx.y-height\n\t\twhen 'top-left'\n\t\t\tx = (ctx.sel_x + ctx.sel_w) - width\n\t\t\ty = ctx.y-height\n\t\telse\n\t\t\tthrow new Error 'invalid align key'\n\t\n\treturn [x,y]\n\nclampPosition = (ctx,x,y,width,height,align_key)->\n\toffset_x = 0 \n\toffset_y = 0\n\tadd_offset_x = 0\n\tadd_offset_y = 0\n\tif x + width > ctx.view_rect.right \n\t\toffset_x = ctx.view_rect.right - (x + width)\n\telse if x < ctx.view_rect.left\n\t\toffset_x = ctx.view_rect.left - x\n\t\n\tif y + height > ctx.view_rect.bottom\n\t\toffset_y = ctx.view_rect.bottom - (y + height)\n\telse if y < ctx.view_rect.top\n\t\toffset_y = ctx.view_rect.top - y\n\t\n\t# log align_key\n\tif offset_y && !offset_x\n\t\tif align_key == 'top-left' || align_key == 'bottom-left'\n\t\t\tadd_offset_x = -ctx.dim/2\n\t\telse if align_key == 'top-right' || align_key == 'bottom-right'\n\t\t\tadd_offset_x = ctx.dim/2\n\t\t# else if align_key == 'left-up' || align_key == 'left-down'\n\t\t# \tadd_offset_x = -ctx.dim/2\n\t\t# else if align_key == 'right-up' || align_key == 'right-down'\n\t\t# \tadd_offset_x = ctx.dim/2\n\t\n\tif offset_x && !offset_y\n\t\t# if align_key == 'top-left' || align_key == 'bottom-left'\n\t\t# \tadd_offset_y = -ctx.dim/2\n\t\t# else if align_key == 'top-right' || align_key == 'bottom-right'\n\t\t# \tadd_offset_y = ctx.dim/2\n\t\tif align_key == 'right-down' || align_key == 'left-down'\n\t\t\tadd_offset_y = -ctx.dim/2\n\t\telse if align_key == 'right-up' || align_key == 'left-up'\n\t\t\tadd_offset_y = ctx.dim/2\n\n\n\n\toffset_x += add_offset_x\n\toffset_y += add_offset_y\n\t# if offset_x && !offset_y\n\t# \toffset_y -= ctx.dim/2\n\t\t\n\n\n\t\t\t\t\n\t# log offset_x,offset_y\n\t# if align_key\n\t# \tif align_key == 'right-down' || align_key == 'right-down' || align_key == 'left-down' || align_key == 'left-up'\n\t# \t\tif offset_x\n\t# \t\t\tlog align_key,offset_x\n\t# \t\t\toffset_y += ctx.dim/2\n\t# \t\telse \n\t# \telse\n\t# \t\tif offset_x\n\t# \t\t\tlog align_key,offset_x\n\t# \t\t\toffset_y -= ctx.dim/2\n\t# \t\telse if offset_y\n\t# \t\t\tlog align_key,offset_y\n\t# \t\t\toffset_x -= ctx.dim/2\n\n\treturn [offset_x,offset_y]\n\n\nexport {clampPosition,getPosition,fixAlign,guessAlign,clampHeight,clampWidth}"
  ]
}