// Generated by CoffeeScript 2.5.1
var test;

import {
  createElement,
  useState,
  useEffect,
  useRef,
  useReducer
} from 'react';

import {
  Layout,
  In,
  Box,
  Row,
  Menu,
  Section,
  SectionLabel,
  Style,
  Separator,
  Anchor
} from '../components';

import ExampleRecursiveMenu from './ExampleRecursiveMenu.coffee';

import ExampleDemoBox from './ExampleDemoBox.coffee';

export default test = function() {
  var anchor2_pos, anchor3_pos, anchor_pos, demo_box_color, demo_box_resize, demo_dot_color, demo_dot_count, dim_2, font_size, is_mounted, menu_1_visible, menu_2_visible, menu_3_visible, renderBox2, setAnchor2Dim, setAnchor2Pos, setAnchor3Pos, setAnchorPos, setDemoBoxColor, setDemoDotColor, setDemoDotCount, setFontSize, setMenu1Visible, setMenu2Visible, setMenu3Visible, setMounted, setSize, size, toggleDemoBoxResize;
  [is_mounted, setMounted] = useState(false);
  [size, setSize] = useState(null);
  useEffect(function() {
    if (!is_mounted) {
      return setMounted(true);
    }
  }, []);
  [menu_1_visible, setMenu1Visible] = useState(true);
  [menu_2_visible, setMenu2Visible] = useState(false);
  [menu_3_visible, setMenu3Visible] = useState(false);
  [dim_2, setAnchor2Dim] = useState([250, 250]);
  [anchor_pos, setAnchorPos] = useState([0, 30]);
  [anchor2_pos, setAnchor2Pos] = useState([150, 400]);
  [anchor3_pos, setAnchor3Pos] = useState([0, 300]);
  [demo_box_resize, toggleDemoBoxResize] = useState(true);
  [demo_box_color, setDemoBoxColor] = useState('yellow');
  [demo_dot_color, setDemoDotColor] = useState('green');
  [demo_dot_count, setDemoDotCount] = useState(2);
  [font_size, setFontSize] = useState(14);
  renderBox2 = function() {
    return h(Box, null, h(In, {
      type: 'toggle',
      label: 'togggle demo box resize',
      value: demo_box_resize,
      set: toggleDemoBoxResize,
      color: 'red'
    }), h(In, {
      type: 'color',
      label: 'anchor bar color',
      value: demo_box_color,
      set: setDemoBoxColor
    }), h(In, {
      type: 'color',
      label: 'anchor dot color',
      value: demo_dot_color,
      set: setDemoDotColor
    }), h(In, {
      type: 'range',
      step: 1,
      min: 0,
      max: 6,
      label: 'anchor dot count',
      value: demo_dot_count,
      set: setDemoDotCount
    }), h(In, {
      type: 'range',
      step: 0.1,
      min: 8,
      max: 20,
      label: 'font size',
      value: font_size,
      set: setFontSize
    }));
  };
  
  // log anchor_pos
  return h(Layout, {
    // getLabelWidth: (label)->
    // 	label.length * 8.15
    fontSize: font_size,
    fontFamily: 'Inconsolata'
  }, h(ExampleRecursiveMenu, {
    name: 'fixed',
    // vert: yes
    align: 'right-down',
    position: [100, 100]
  }), h(Anchor, {
    handlePosition: 'bottom',
    align: 'left-down',
    autoHandlePosition: true,
    autoSnapHandlePosition: true,
    autoAlign: false,
    position: anchor_pos,
    visible: menu_1_visible,
    onBarClick: function() {
      return setMenu1Visible(!menu_1_visible);
    },
    setPosition: function(x, y) {
      return setAnchorPos([x, y]);
    }
  }, h(ExampleRecursiveMenu, {
    name: 'menu',
    vert: true
  })), h(Anchor, {
    handlePosition: 'bottom',
    autoHandlePosition: true,
    autoSnapHandlePosition: true,
    autoAlign: false,
    dotColor: demo_dot_color,
    dotCount: demo_dot_count,
    barColor: demo_box_color,
    position: anchor2_pos,
    size: demo_box_resize && dim_2,
    visible: menu_2_visible,
    resizeWidth: false,
    resizeHeight: false,
    onBarClick: function() {
      return setMenu2Visible(!menu_2_visible);
    },
    setPosition: function(x, y) {
      return setAnchor2Pos([x, y]);
    },
    setSize: function(width, height) {
      return setAnchor2Dim([width, height]);
    }
  }, h(ExampleDemoBox)), h(Anchor, {
    autoHandlePosition: true,
    autoSnapHandlePosition: true,
    position: anchor3_pos,
    visible: menu_3_visible,
    resizeWidth: false,
    resizeHeight: false,
    onBarClick: function() {
      return setMenu3Visible(!menu_3_visible);
    },
    setPosition: function(x, y) {
      return setAnchor3Pos([x, y]);
    }
  }, renderBox2()));
};
