// Generated by CoffeeScript 2.5.1
var ExampleRecursiveMenu, h, menuToggleReducer, menuToggleReducerState;

import {
  createElement,
  useState,
  useEffect,
  useRef,
  useReducer
} from 'react';

import {
  Layout,
  In,
  Box,
  Menu,
  Section,
  SectionLabel,
  Style,
  Separator
} from '../components';

h = createElement;

menuToggleReducerState = {};

menuToggleReducer = function(state, {menu_name, item_name}) {
  return Object.assign({}, state, {
    [`${menu_name}`]: item_name
  });
};

import ExampleDemoBox from './ExampleDemoBox.coffee';

ExampleRecursiveMenu = function(props) {
  var dispatchMenuState, menu_state, onSelectRecursiveMenuItem, renderBox, renderRecursiveMenu;
  [menu_state, dispatchMenuState] = useReducer(menuToggleReducer, menuToggleReducerState);
  onSelectRecursiveMenuItem = function(menu_name, item_name) {
    // log 'on SELECT',menu_name,'->',item_name
    return dispatchMenuState({
      menu_name: menu_name,
      item_name: item_name
    });
  };
  renderBox = function() {
    return h(ExampleDemoBox);
  };
  renderRecursiveMenu = function(menu_name, level = 0, vert, position) {
    var i, item_count, items, j, ref;
    items = {};
    if (level % 2 === 0) {
      item_count = 2;
    } else {
      item_count = (level + 1) * 2;
    }
    for (i = j = 0, ref = item_count; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      items[`${menu_name}${i}`] = renderRecursiveMenu.bind(null, `${menu_name}${i}`, level + 1);
      items[`${menu_name}${i}-box`] = renderBox;
    }
    return h(Menu, {
      vert: props.vert != null ? props.vert : level % 2 === 1,
      select: menu_state[menu_name],
      position: position,
      onSelect: function(item_name) {
        return onSelectRecursiveMenuItem(menu_name, item_name);
      },
      items: items
    });
  };
  return renderRecursiveMenu(props.name, 0, props.vert, props.position);
};

export default ExampleRecursiveMenu;
